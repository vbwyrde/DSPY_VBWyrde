<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Test Google Cloud Web Method</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<style>
    .spinner {
        width: 70px;
        text-align: center;
    }

        .spinner > div {
            width: 18px;
            height: 18px;
            background-color: #b6ff00;
            border-radius: 100%;
            display: inline-block;
            -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
            animation: sk-bouncedelay 1.4s infinite ease-in-out both;
        }

        .spinner .bounce1 {
            -webkit-animation-delay: -0.32s;
            animation-delay: -0.32s;
        }

        .spinner .bounce2 {
            -webkit-animation-delay: -0.16s;
            animation-delay: -0.16s;
        }

    @-webkit-keyframes sk-bouncedelay {
        0%, 80%, 100% {
            -webkit-transform: scale(0)
        }

        40% {
            -webkit-transform: scale(1.0)
        }
    }

    @keyframes sk-bouncedelay {
        0%, 80%, 100% {
            -webkit-transform: scale(0);
            transform: scale(0);
        }

        40% {
            -webkit-transform: scale(1.0);
            transform: scale(1.0);
        }
    }

    .OverlayStart {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgb(0, 0, 0, 0.80);
        z-index: 9999;
        display: flex;
        justify-content: center;
        align-items: center;
    }

</style>

</head>
<body>

    <div id="loading-overlay" class="OverlayStart">
        <div class="spinner">
            <div class="bounce1"></div>
            <div class="bounce2"></div>
            <div class="bounce3"></div>
        </div>
    </div>

    <form id="form1" runat="server">
        <div>
            <textarea id="txtContext" rows="3" cols="80">you are an author who writes in the style of plain, simple, terse text, in third person, present tense. Focus on appearance, clothing, and grooming. You present characters in the natural postures of their every day lives.
            </textarea>
            <br>
            <textarea id="txtInformation" rows="3" cols="80">genre: wild west, sex: female, class: gun-slinger, personality: spunky, astrological sign: libra.
            </textarea>
            <br>
            <br>
            <button id="cmdRun" width=40px>Run</button>
            <br>
            <br>
            <label id="Lab_Test" style="background-color: whitesmoke; padding:6px; border: 1px solid black; display:block; ">Test Label</label>
            <br />
            <br />
            <img id="img1" src="" alt="Generated Image" style="max-width: 30%; height: auto;" />
        </div>
    </form>

<script>
    $(document).ready(function () {
        var xhr = null; // Store the AJAX request object
        var requestCancelled = false; // Flag to track request cancellation

        $("#loading-overlay").hide();
        $("#cmdRun").click(function (e) {
            e.preventDefault();
            // Show the loading overlay
            $("#loading-overlay").show();

            var context = $("#txtContext").val();
            var information = $("#txtInformation").val();
            var model = "llama-v3-70b-instruct"; // Example model
            var stop = "";
            var temperature = .40;
            var max_tokens = 400;

            xhr = $.ajax({
                type: "POST",
                url: "https://elthosrouter.onrender.com/execute",
                data: JSON.stringify({ context: context, information: information, model: model, stop: stop, max_tokens: max_tokens, temperature: temperature }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    var description = "";

                    console.log(response.description);
                    // IF THERE ARE MULTIPLE DESCRIPTIONS TAKE THE SECOND TO LAST ONE, AS THE LAST ONE MAY BE TRUNCATED
                    var descriptionRegex = /Description:\s*(.*?)(?=[^a-zA-Z0-9'",.\-() ])/gs;
                    var matches = response.description.match(descriptionRegex);
                    if (matches && matches.length > 0) {
                        if (matches.length > 1) {
                            description = matches[matches.length - 2];
                        } else {
                            description = matches[0];
                        }
                    } else {
                        description = response.description;
                    }
                    description = description.replace("Description: ", "");
                    $("#Lab_Test").text(description);

                    // Generate image based on the description
                    generateImageFromDescription(description);
                },
                error: function (xhr, status, error) {
                    $("#loading-overlay").hide();
                    console.log("AJAX error:", xhr, status, error);
                    $("#Lab_Test").text("Error: " + xhr.responseText);
                }
            });
        });


        function generateImageFromDescription(description) {
            // Prepare the data to be sent to the server
            ImgDescription = description + " in the style of a Rembrandt sketch or oil painting. Upper body and full head.  High Resolution. Dramatic angles. Cinematic lighting. Captured in mid-action."
            const data = {
                description: ImgDescription
            };

            // Make the AJAX request to the /GetImage endpoint
            fetch('https://elthosrouter.onrender.com/GetImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    // Handle the response from the server
                    console.log('Response:', data);

                    // Assuming the server returns the image data as a base64-encoded string
                    const imageData = data.image;

                    // Set the src attribute of the image element
                    const img = document.getElementById('img1');
                    img.src = `data:image/jpeg;base64,${imageData}`;
                    $("#loading-overlay").hide();
                })
                .catch(error => {
                    // Handle any errors that occurred during the request
                    $("#loading-overlay").hide();
                    console.error('Error:', error);
                });
        }

        // Listen for the Escape key press
        $(document).keyup(function (e) {
            if (e.key === "Escape" && xhr !== null && !requestCancelled) {
                // Cancel the AJAX request
                requestCancelled = true;
                xhr.abort();

                // Hide the loading overlay
                $("#loading-overlay").hide();

                // Display a message to the user
                $("#Lab_Test").text("Request cancelled by user.");
            }
        });
    });

</script>

</body>
</html>
